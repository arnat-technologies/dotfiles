#!/bin/bash

_update_yml_with_query() { # 1: query, 2: file
  echo -n "$1?: "
  read answer
  yq -iy "$1 = \"$answer\"" $2
}

_populate_tmpl_from_yaml() { # 1: TEMPLATE, $2: YAML_DATA, 3: JSON_DATA
  echo $(j2 --format=yaml $1 $2) >$3
  echo $file
}

_populate_json_from_data() { # 1: YAML_FILE, 2: QUERY, 3: JSON_DATA_FILE
  local YAML_DATA_FILE=$(tmp_file yaml)
  yq -iy --null-input '.data' $YAML_DATA_FILE

  for item in $(yq ".$2.params[]" $1 -r); do
    _update_yml_with_query ".data.$item" $YAML_DATA_FILE
  done

  _populate_tmpl_from_yaml "$(dirname $1)/$(yq ".$2.tmpl" $1 -r)" $YAML_DATA_FILE $3 >/dev/null
}

_build_request() { # $1: YAML_FILE $2: QUERY, 3: JSON_DATA_FILE
  local BODY=""
  local URL=$(yq ".env.$REQRES_ENV.url" $1 -r)/$(yq ".$2.action" $1 -r)
  local METHOD=$(yq ".$2.method" $1 -r)
  local PARAMS=$(yq ".$2.params[]?" $1 -r)

  if [ -z $PARAMS ]; then :; else
    BODY="$BODY --json <$3"
  fi

  echo "$METHOD $URL $BODY"
}

_build_data_request() { # 1: YAML_FILE, 2: QUERY
  local JSON_DATA_FILE=$(tmp_file json)
  _populate_json_from_data $1 $2 $JSON_DATA_FILE
  local REQUEST=$(_build_request $1 $2 $JSON_DATA_FILE)

  case $API_OUTPUT in
  vscode | raw)
    JSON_DATA_FILE=$(tmp_file json)
    eval "http $REQUEST --body" | tee $JSON_DATA_FILE >/dev/null
    ;;
  esac

  case $API_OUTPUT in
  http)
    eval " http $REQUEST"
    ;;
  verbose)
    eval " http $REQUEST --print BHbhm"
    ;;
  vscode)
    code $JSON_DATA_FILE
    ;;
  raw)
    echo $JSON_DATA_FILE
    ;;
  esac
}

_api_env() {
  API_OUTPUT=http

  for arg in "$@"; do
    case $arg in
    -o=* | --output=*)
      export API_OUTPUT="${arg#*=}"
      shift
      ;;
    esac
  done
}
